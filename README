
netselect 0.1
=============

This is netselect, an ultrafast intelligent parallelizing binary-search
implementation of "traceroute."

Now stop laughing and pay attention.

netselect determines several facts about all of the hosts given on the
command line, much faster you would if you manually tried to use ping and
traceroute.  For example, if I type:

	netselect -v ftp.fceia.unr.edu.ar ftp.kulnet.kuleuven.ac.be \
			ftp.cdrom.com ftp.debian.org ftp.de.debian.org
			
It tells me this:

ftp.fceia.unr.edu.ar                   422 ms   19 hops   40% ok ( 2/ 5)
ftp.kulnet.kuleuven.ac.be             9999 ms   30 hops    0% ok
ftp.cdrom.com                          215 ms   13 hops   89% ok (17/19)
ftp.debian.org                         194 ms   20 hops   50% ok ( 3/ 6)
ftp.de.debian.org                      276 ms   15 hops   66% ok ( 6/ 9)

For each host, it figures out the approximate ping time (though not as
accurately as "ping" does), the number of network "hops" to reach the
target, and the percentage of ping requests that got through successfully.

Note that for ftp.kulnet.kuleuven.ac.be in this case, nothing got through at
all.  That indicates that either the host doesn't exist, or it is down.

For a bigger example, I've included the file debian-ftp-mirrors, which is a
partially up-to-date list of Debian Linux FTP site mirrors.  Try this:

	netselect -vv $(cat debian-ftp-mirrors)


But Why?
========

Why do I want to know about my ping times to computers in Belgium?  Well,
the main reason for netselect -- and its name gives you a hint -- is to help
choose the "best" server for you from among a (possibly very large) list. 
netselect doesn't actually do the choosing for you; you have to take its
statistics and make decisions yourself.  Do you want:

	- maximum long-term stability?
	    If there are fewer hops from them to you, there is less
	    likelihood that someone in the middle will go down.

	- minimum telnet or irc delay?
	    The shortest ping time will result in the least lag, as long as
	    your packet loss isn't too high.

	- fastest throughput?
	    It's very important to find a site with a very low packet loss. 
	    After that, ping time will give you a clue.
	    
Someday, maybe programs will help make these decisions for you.  Until then,
you have to look at the data and decide for yourself.  But it's better than
making a completely uninformed guess.


How does it work?
=================

I don't have much time to write this right now, so I'll give you the short
story.

First:

 - decode each hostname into an IP address, and stores each IP address into
   a table.  This is actually the slowest part.
   
Now for all hosts at once:
   
 - start firing UDP packets with "random-guess" TTL values, much like
   traceroute does.  Actually, the code for this is derived from traceroute.
   
 - if an "ICMP TTL Expired" message comes back, then the TTL was too low:
   the host is farther away than that.  Increase TTL next time.  Otherwise,
   a "Port Unreachable" message comes back, meaning the TTL was large
   enough.  Try a smaller one.  We do this until we narrow down the TTL. 
   (This is where the "binary search" comes in.)
   
 - Meanwhile, collect timing statistics for all packets that reached the
   host.  Packets that don't come back are considered lost.

When all the hosts have had their TTL values narrowed down, and the "-t"
timeout option has expired, we're done.  Close the sockets and dump the
statistics to stdout.



Command-line Options
====================

Not much right now.  

	-v	-- verbose mode.  Displays nameserver resolution messages to
		   stderr.  You probably want this so that you don't get
		   bored waiting for a hundred name resolutions to finish.
		   
	-vv	-- very verbose mode.  Displays nameserver resolution and
		   play-by-play messages to stderr.
		   
	-m #	-- maximum ttl.  Don't accept hosts with more hops than
		   this.
		   
	-t #	-- make sure the test runs for at least the specified number
		   of seconds.  This is a hack, actually.

In all cases, statistics are written to stdout when the program is done. 
"-vv" is most interesting to watch.


The Future
==========

I didn't actually have time to write this program, and probably don't have
time to improve it either.  But if I did, there are several things that
would be nice to have:

	- replace '-t' option with something to make sure each host gets the
	  same number of requests.  The current way isn't fair at all --
	  some hosts get 30 requests, and some get two.  The "% ok" feature
	  is pretty inaccurate because of this.

	- parallelize nameserver lookups too.  Those are really slow!
	
	- try to estimate line bandwidth somehow.  The 'bing' program does
	  it using two different ping packet sizes.

	- try to improve 'ping time' estimate.  It's a problem right now
	  because netselect writes a lot of packets in a quick stream (for
	  speed reasons).  It's fair to each host, though:  they all put up
	  with an equal amount of lag :)

This program is highly experimental.  Please let me know what you think.

	- Avery Pennarun
	  <apenwarr@worldvisions.ca>
